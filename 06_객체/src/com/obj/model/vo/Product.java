package com.obj.model.vo;

public class Product {
	// 필드!
	//	변수선언해준것들, 파란색 변수명들로 표시된 애들! 이것들을 필드라고 한다.
	//	특정 상품에 대한 데이터를 저장하기 위한 클래스를 만든것임.
	//	이거 그대로 사용할 수는 없다. 지금은 Product 라는게 있다고 선언만 한것임.
	//	이 클래스를 기반으로 해서 생성(인스턴스화)해서 설계한 클래스를 기반으로 책상, 서랍장, 화장대 등을 만들게됨. 
	String productName;
	int productPrice;
	String productComany;
	
	// 7_객체 11/51
	// 클래스는 코드 그 자체다. 클래스만 가지고는 할 수 있는게 없다.
	// "이런거 필요해", "이렇게 만들어" 를 제시할 뿐임!
	// 객체(Instance)는 클래스에 의해 생성(인스턴스화)된 실제 사용될 고유 객체
	
	// 7_객체 12/51
	// 저장공간을 선언할때 자료형, 변수명
	// ex Student s = new Student();
	// 클래스 이름 자체도 하나의 자료형이 된다!
	// new가 붙으면 Student 라는 클래스에 작성된 코드를 보고 생성함.
	// new가 붙으면 heap영역에 생성됨.
	// 참조형 자료형(클래스명이 ㅇㅁㄴㄻㄴㅇ;ㅏ리ㅓ;밍ㄴ 
	
	// 7_객체 13/51
	// 캡슐화:
	//  데이터를 다른 사람이 함부로 사용하지 못하도록 은닉, 그리고 내가 접근해서 수정할 수 있게 해야함.
	// 상속: 객체지향 프로그램에서 관계를 만들고
	// 다형성: 유지보수가 원할하게 해주는 것이 다형성 (추상화의 필요성 -> 상속관계 고려 등을 전반적으로 수정 보수하는 것)

	// 7_객체 14/51
	// 캡슐화, 정보 은닉, 
	
	// 7_객체 16/51
	// [접근제한자][예약어] class 클래스명{ 내용 }
	// 접근제한자: 어떤 클래스는 여기에 접속 못해, 어떤 클래스만 접근 가능해~
	// 예약어: static, final, 앱스트래? (상속 이후에 배울 예정)
	// class라는 예약어
	// 클래스명: 첫글자 대문자 카멜 케이스로 붙여서 사용.
	// ㅁㄴㅇ리ㅓ;ㅏㅁ어리 다시 듣기 youtube
	// 클래스 내부의 생성자! : 
	// ㅇㅇ,ㅇㅇ,기능 이렇게 세가지를 선안해서 사용한다!
	
	// 멤버라는 클래스, 접근 제한자는 보통 public을 사용할 것임. class 예약어. 멤버라는 타입, 클래스를 만듬.
	// 클래스 중괄호 내부에 변수 선언(필드)
	// (생성자)
	// (메소드, 기능)
	
	// 7_객체 18/51
	// public으로 선언하면 내 프로젝트 안에 어떤 패키지에 있던 어디서든 사용할 수 있음.
	// Scanner는 패키지가 다른 곳인데 상요할 수 있었음! public으로 되어있기 때문에 가능한것임.
	// (default)로 설정하면 사용 못함. 특별한 경우에 조정할 수 있음. 디폴트는 그냥 생략해서 사용하면 됨.
	
	// PublicTestClass 를 만들어보자!
}
